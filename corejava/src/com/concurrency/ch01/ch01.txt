第一章、并发编程的挑战

1.1.上下文切换
CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下个任务，但是在切换前会保存上一个任务的状态，
以便下次切换回这个任务时，可以再加载这个任务的状态。所以任务的保存到再加载的过程就是一次上下文切换。

如何减少上下文切换:
	.无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据用ID进行Hash算法后分段，不同的线程处理不同段的数据。
	.CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。
	.使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态。
	.协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。

1.2.死锁
线程间相互等待锁的释放。

避免死锁的几个常见方法:
	.避免一个线程同时获取多个锁。
	.避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。
	.尝试使用定时锁，使用tryLock(timeout)来替代使用内部锁机制。
	.对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败。
	
1.3.资源限制的挑战
（1）什么是资源限制？
资源限制是指在进行并发编程时，程序的执行速度受限于计算机硬件资源或软件资源的限制。硬件资源限制有带宽的上传下载速度，硬盘读写速度和CPU的处理速度。软件资源限制有数据库的连接数和Sorket连接数等。

（2）资源限制引发的问题
并发编程将代码执行速度加速的原则： 是将代码中串行执行的部分变成并发执行，但是如果某段串行的代码并发执行，但是因为受限于资源的限制，仍然在串行执行，这时候程序不仅不会执行加快，反而会更慢，
因为增加了上下文切换和资源调度的时间。

（3）如何解决资源限制的问题？
对于硬件资源限制，可以考虑使用集群并行执行程序，既然单机的资源有限制，那么就让程序在多机上运行。
对于软件资源限制，可以考虑使用资源池将资源复用，比如使用连接池将数据库和Sorket连接复用，或者调用对方webservice接口获取数据时，只建立一个连接。

（4）在资源限制情况下进行并发编程
那么如何在资源限制的情况下，让程序执行的更快呢？根据不同的资源限制调整程序的并发度。

总结：
的并发程序写的不严谨，在并发下如果出现问题，定位起来会比较耗时和棘手。建议多使用JDK并发包提供的并发容器和工具类来帮你解决并发问题，因为这些类都已经通过了充分的测试和优化，解决了本章提到的几个挑战。












